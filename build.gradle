
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id "java"
    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "org.jetbrains.kotlin.jupyter.api" version "0.10.0-131-1"
}

repositories {
    mavenCentral()
//    mavenLocal()
}


dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.6.10'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.6.10'
//    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // needed to work around https://youtrack.jetbrains.com/issue/KT-15064
    compileOnly 'org.jetbrains.kotlin:kotlin-script-runtime:1.6.10'

    api  "org.apache.commons:commons-csv:1.6" // cant upgrade to 1.8 because of https://issues.apache.org/jira/browse/CSV-257
    api 'org.apache.poi:poi-ooxml:5.0.0'

    api 'com.beust:klaxon:5.5'//    compile 'me.tongfei:progressbar:0.5.5'

    api('org.jetbrains.lets-plot:lets-plot-kotlin-jvm:3.1.0')
//    implementation("org.jetbrains.lets-plot:lets-plot-batik:2.0.4")

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation('io.kotest:kotest-assertions-core:5.0.3')
    testImplementation 'com.h2database:h2:2.0.204'
    testImplementation 'org.jetbrains.kotlin:kotlin-script-runtime:1.6.0'
}


// disabled because would require to inherit StringSpec in all test classes
//test {
//    useJUnitPlatform()
//}


test {
    // Tests would fail with default memory settings
    // See https://stackoverflow.com/questions/20490105/gradleworkermain-outofmemoryerror
    maxHeapSize = "2048m"
}

// disabled because annotation scanner works just fine
//processJupyterApiResources {
//    libraryProducers = ["krangl.integration.Integration"]
//}

//Minimal dokka configuration:
//dokka {
//    outputFormat = 'html'
////    outputDirectory = "$buildDir/javadoc"
//    outputDirectory = "$projectDir/javadoc"
//
//    configuration {
//
////    sourceDirs = files('src/test/kotlin')
//        samples = ['src/test/kotlin/krangl/samples']
//
//        // Emit warnings about not documented members. Applies globally, also can be overridden by packageOptions
//        reportUndocumented = false
//
////    http://kotlinlang.org/docs/reference/kotlin-doc.html#module-and-package-documentation
//        includes = ['docs/packages_info.md']
//    }
//}
//

// see https://github.com/Kotlin/dokka/issues/42
//task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
//    outputFormat = 'javadoc'
//    outputDirectory = javadoc.destinationDir
//
//    configuration {
//        reportUndocumented = false
//        samples = ['src/test/kotlin/krangl/samples']
//    }
//
//    inputs.dir 'src/main/kotlin'
//}
//
//task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

//http://stackoverflow.com/questions/34377367/why-is-gradle-install-replacing-my-version-with-unspecified
group 'com.github.holgerbrandl'
//version '0.16.95'
version '0.17.2'



java {
    withJavadocJar()
    withSourcesJar()
}



publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)

            pom {
                name = 'krangl'
                description = 'krangl is a {K}otlin DSL for data w{rangl}ing'
                url = 'https://github.com/holgerbrandl/krangl'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/holgerbrandl/krangl/blob/master/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'holgerbrandl'
                        name = 'Holger Brandl'
                        email = 'holgerbrandl@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/holgerbrandl/krangl.git'
                    developerConnection = 'scm:git:ssh://github.com/holgerbrandl/krangl.git'
                    url = 'https://github.com/holgerbrandl/krangl.git'
                }
            }
        }
    }
}


nexusPublishing {
    repositories {
        sonatype {
            // we need to provide a fallback here since all dev but one won't have those credentials
            // https://stackoverflow.com/questions/43333990/how-to-assign-default-values-for-ext-based-properties-in-gradle
            // https://discuss.gradle.org/t/getproperty-vs-findproperty/21822
            snapshotRepositoryUrl = uri(project.findProperty("sonatypeStagingProfileId") ?: 'not_defined')
            username = project.findProperty("ossrhUsername")  ?: 'not_defined'
            password = project.findProperty("ossrhPassword") ?: 'not_defined'
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
